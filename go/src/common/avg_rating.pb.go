// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: avg_rating.proto

package common

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AvgRating struct {
	MovieId uint32  `protobuf:"varint,1,opt,name=MovieId,json=movieId,proto3" json:"MovieId,omitempty"`
	Rating  float32 `protobuf:"fixed32,2,opt,name=Rating,json=rating,proto3" json:"Rating,omitempty"`
	Votes   uint32  `protobuf:"varint,3,opt,name=Votes,json=votes,proto3" json:"Votes,omitempty"`
}

func (m *AvgRating) Reset()         { *m = AvgRating{} }
func (m *AvgRating) String() string { return proto.CompactTextString(m) }
func (*AvgRating) ProtoMessage()    {}
func (*AvgRating) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebb8ef18bdf094c6, []int{0}
}
func (m *AvgRating) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AvgRating) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AvgRating.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AvgRating) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AvgRating.Merge(m, src)
}
func (m *AvgRating) XXX_Size() int {
	return m.Size()
}
func (m *AvgRating) XXX_DiscardUnknown() {
	xxx_messageInfo_AvgRating.DiscardUnknown(m)
}

var xxx_messageInfo_AvgRating proto.InternalMessageInfo

func (m *AvgRating) GetMovieId() uint32 {
	if m != nil {
		return m.MovieId
	}
	return 0
}

func (m *AvgRating) GetRating() float32 {
	if m != nil {
		return m.Rating
	}
	return 0
}

func (m *AvgRating) GetVotes() uint32 {
	if m != nil {
		return m.Votes
	}
	return 0
}

func init() {
	proto.RegisterType((*AvgRating)(nil), "common.AvgRating")
}

func init() { proto.RegisterFile("avg_rating.proto", fileDescriptor_ebb8ef18bdf094c6) }

var fileDescriptor_ebb8ef18bdf094c6 = []byte{
	// 147 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x48, 0x2c, 0x4b, 0x8f,
	0x2f, 0x4a, 0x2c, 0xc9, 0xcc, 0x4b, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4b, 0xce,
	0xcf, 0xcd, 0xcd, 0xcf, 0x53, 0x0a, 0xe6, 0xe2, 0x74, 0x2c, 0x4b, 0x0f, 0x02, 0x4b, 0x09, 0x49,
	0x70, 0xb1, 0xfb, 0xe6, 0x97, 0x65, 0xa6, 0x7a, 0xa6, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0xf0, 0x06,
	0xb1, 0xe7, 0x42, 0xb8, 0x42, 0x62, 0x5c, 0x6c, 0x10, 0x35, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0x4c,
	0x41, 0x6c, 0x10, 0xc3, 0x84, 0x44, 0xb8, 0x58, 0xc3, 0xf2, 0x4b, 0x52, 0x8b, 0x25, 0x98, 0xc1,
	0xea, 0x59, 0xcb, 0x40, 0x1c, 0x27, 0x89, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c,
	0xf0, 0x48, 0x8e, 0x71, 0xc2, 0x63, 0x39, 0x86, 0x0b, 0x8f, 0xe5, 0x18, 0x6e, 0x3c, 0x96, 0x63,
	0x48, 0x62, 0x03, 0xdb, 0x6e, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x4d, 0x29, 0x30, 0x48, 0x91,
	0x00, 0x00, 0x00,
}

func (m *AvgRating) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AvgRating) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AvgRating) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Votes != 0 {
		i = encodeVarintAvgRating(dAtA, i, uint64(m.Votes))
		i--
		dAtA[i] = 0x18
	}
	if m.Rating != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Rating))))
		i--
		dAtA[i] = 0x15
	}
	if m.MovieId != 0 {
		i = encodeVarintAvgRating(dAtA, i, uint64(m.MovieId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAvgRating(dAtA []byte, offset int, v uint64) int {
	offset -= sovAvgRating(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AvgRating) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MovieId != 0 {
		n += 1 + sovAvgRating(uint64(m.MovieId))
	}
	if m.Rating != 0 {
		n += 5
	}
	if m.Votes != 0 {
		n += 1 + sovAvgRating(uint64(m.Votes))
	}
	return n
}

func sovAvgRating(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAvgRating(x uint64) (n int) {
	return sovAvgRating(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AvgRating) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAvgRating
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AvgRating: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AvgRating: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MovieId", wireType)
			}
			m.MovieId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAvgRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MovieId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rating", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Rating = float32(math.Float32frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Votes", wireType)
			}
			m.Votes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAvgRating
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Votes |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAvgRating(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAvgRating
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAvgRating
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAvgRating(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAvgRating
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAvgRating
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAvgRating
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAvgRating
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAvgRating
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAvgRating
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAvgRating        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAvgRating          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAvgRating = fmt.Errorf("proto: unexpected end of group")
)
